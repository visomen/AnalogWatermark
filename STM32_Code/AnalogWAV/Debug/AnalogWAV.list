
AnalogWAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed0  08004ed0  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed0  08004ed0  00005ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed8  08004ed8  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004edc  08004edc  00005edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004ee0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021e8  2000001c  08004efc  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002204  08004efc  00006204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012811  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e6  00000000  00000000  0001885d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf3  00000000  00000000  0001bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e96f  00000000  00000000  0001c9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123cd  00000000  00000000  0003b33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c88f7  00000000  00000000  0004d707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115ffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  00116044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004e88 	.word	0x08004e88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08004e88 	.word	0x08004e88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <TIM8_UP_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TIM8_UP_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM8_UP_IRQn 0 */
	GenerateSeq(out_seq);
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <TIM8_UP_IRQHandler+0x14>)
 800050e:	f000 f851 	bl	80005b4 <GenerateSeq>
	/* USER CODE END TIM8_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim8);
 8000512:	4803      	ldr	r0, [pc, #12]	@ (8000520 <TIM8_UP_IRQHandler+0x18>)
 8000514:	f002 fda2 	bl	800305c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM8_UP_IRQn 1 */

	/* USER CODE END TIM8_UP_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000154 	.word	0x20000154
 8000520:	200000a8 	.word	0x200000a8

08000524 <white_noise_sample>:

uint16_t white_noise_sample(){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
    // 16-bit Galois LFSR (XOR-Shift)
    lfsr ^= lfsr >> 7;
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <white_noise_sample+0x58>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	09db      	lsrs	r3, r3, #7
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <white_noise_sample+0x58>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	4053      	eors	r3, r2
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b10      	ldr	r3, [pc, #64]	@ (800057c <white_noise_sample+0x58>)
 800053a:	801a      	strh	r2, [r3, #0]
    lfsr ^= lfsr << 9;
 800053c:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <white_noise_sample+0x58>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	025b      	lsls	r3, r3, #9
 8000542:	b21a      	sxth	r2, r3
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <white_noise_sample+0x58>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b21b      	sxth	r3, r3
 800054a:	4053      	eors	r3, r2
 800054c:	b21b      	sxth	r3, r3
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <white_noise_sample+0x58>)
 8000552:	801a      	strh	r2, [r3, #0]
    lfsr ^= lfsr >> 13;
 8000554:	4b09      	ldr	r3, [pc, #36]	@ (800057c <white_noise_sample+0x58>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	0b5b      	lsrs	r3, r3, #13
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <white_noise_sample+0x58>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	4053      	eors	r3, r2
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <white_noise_sample+0x58>)
 8000566:	801a      	strh	r2, [r3, #0]

    // Mask to 12 bits (0-4095)
    return lfsr & 0x0FFF;
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <white_noise_sample+0x58>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000570:	b29b      	uxth	r3, r3
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20000000 	.word	0x20000000

08000580 <generate_new_seed>:

uint16_t generate_new_seed(uint16_t current_seed) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	current_seed = current_seed ^ 0xB400;
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	f083 437f 	eor.w	r3, r3, #4278190080	@ 0xff000000
 8000590:	f483 037f 	eor.w	r3, r3, #16711680	@ 0xff0000
 8000594:	f483 4334 	eor.w	r3, r3, #46080	@ 0xb400
 8000598:	80fb      	strh	r3, [r7, #6]
	if (current_seed == 0) {current_seed = 1;}
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <generate_new_seed+0x24>
 80005a0:	2301      	movs	r3, #1
 80005a2:	80fb      	strh	r3, [r7, #6]
    return current_seed; // Prime-derived XOR mask
 80005a4:	88fb      	ldrh	r3, [r7, #6]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <GenerateSeq>:

//Generates a brownian sequence, gets ready for the next time it will be needed
void GenerateSeq(uint16_t *SeqArray){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 4096; i++) { //This generates a whole next sequence to be transmitted
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e03e      	b.n	8000640 <GenerateSeq+0x8c>
		uint16_t white_noise = white_noise_sample();
 80005c2:	f7ff ffaf 	bl	8000524 <white_noise_sample>
 80005c6:	4603      	mov	r3, r0
 80005c8:	81fb      	strh	r3, [r7, #14]
		int32_t step = (white_noise & 0x7F) - 64; // Small step (-64 to +63)
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005d0:	3b40      	subs	r3, #64	@ 0x40
 80005d2:	613b      	str	r3, [r7, #16]

		if (white_noise & 1) {step += 1;} // Ensure symmetry
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <GenerateSeq+0x30>
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	3301      	adds	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]

		int32_t correction = (2048 - brownian_state) / 256; // Small force toward center
 80005e4:	4b21      	ldr	r3, [pc, #132]	@ (800066c <GenerateSeq+0xb8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <GenerateSeq+0x3e>
 80005f0:	33ff      	adds	r3, #255	@ 0xff
 80005f2:	121b      	asrs	r3, r3, #8
 80005f4:	60bb      	str	r3, [r7, #8]
		step += correction;
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	4413      	add	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]

		brownian_state += step; // Integrate step
 80005fe:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <GenerateSeq+0xb8>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4413      	add	r3, r2
 8000606:	4a19      	ldr	r2, [pc, #100]	@ (800066c <GenerateSeq+0xb8>)
 8000608:	6013      	str	r3, [r2, #0]

		if (brownian_state < 0) {brownian_state = 0;}
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <GenerateSeq+0xb8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	da02      	bge.n	8000618 <GenerateSeq+0x64>
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <GenerateSeq+0xb8>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
		if (brownian_state > 4095) {brownian_state = 4095;}
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <GenerateSeq+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000620:	db03      	blt.n	800062a <GenerateSeq+0x76>
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <GenerateSeq+0xb8>)
 8000624:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000628:	601a      	str	r2, [r3, #0]

		SeqArray[i] = (uint16_t)brownian_state;
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <GenerateSeq+0xb8>)
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	b28a      	uxth	r2, r1
 8000638:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4096; i++) { //This generates a whole next sequence to be transmitted
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000646:	dbbc      	blt.n	80005c2 <GenerateSeq+0xe>
	}
	brownian_state = 2048;
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <GenerateSeq+0xb8>)
 800064a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800064e:	601a      	str	r2, [r3, #0]
	lfsr = generate_new_seed(lfsr); //Create new seed for the next generation
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <GenerateSeq+0xbc>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff93 	bl	8000580 <generate_new_seed>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <GenerateSeq+0xbc>)
 8000660:	801a      	strh	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000004 	.word	0x20000004
 8000670:	20000000 	.word	0x20000000

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fcaf 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f891 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 fa5d 	bl	8000b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000686:	f000 fa31 	bl	8000aec <MX_DMA_Init>
  MX_DAC1_Init();
 800068a:	f000 f8d7 	bl	800083c <MX_DAC1_Init>
  MX_TIM2_Init();
 800068e:	f000 f90f 	bl	80008b0 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000692:	f000 f95b 	bl	800094c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 fbbc 	bl	8000e14 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800069c:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <main+0xf0>)
 800069e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <main+0xf0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <main+0xf0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <main+0xf0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <main+0xf0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006bc:	4929      	ldr	r1, [pc, #164]	@ (8000764 <main+0xf0>)
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fbde 	bl	8000e80 <BSP_COM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <main+0x5a>
  {
    Error_Handler();
 80006ca:	f000 fa5d 	bl	8000b88 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //First generation
  GenerateSeq(out_seq);
 80006ce:	4826      	ldr	r0, [pc, #152]	@ (8000768 <main+0xf4>)
 80006d0:	f7ff ff70 	bl	80005b4 <GenerateSeq>
  out_seq[4096] = 2048;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <main+0xf4>)
 80006d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80006da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006de:	801a      	strh	r2, [r3, #0]

  uint32_t *dac_address = (uint32_t *)&(DAC1->DHR12R1);
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <main+0xf8>)
 80006e2:	607b      	str	r3, [r7, #4]


  HAL_DMA_Init(&hdma_tim8_ch1);
 80006e4:	4822      	ldr	r0, [pc, #136]	@ (8000770 <main+0xfc>)
 80006e6:	f001 f841 	bl	800176c <HAL_DMA_Init>
  HAL_DMA_Start(&hdma_tim8_ch1, out_seq, dac_address, 4097); //One more than 4096 because I want the zero to be the last value
 80006ea:	491f      	ldr	r1, [pc, #124]	@ (8000768 <main+0xf4>)
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	f241 0301 	movw	r3, #4097	@ 0x1001
 80006f2:	481f      	ldr	r0, [pc, #124]	@ (8000770 <main+0xfc>)
 80006f4:	f001 f8e2 	bl	80018bc <HAL_DMA_Start>

  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	481e      	ldr	r0, [pc, #120]	@ (8000774 <main+0x100>)
 80006fc:	f000 fe10 	bl	8001320 <HAL_DAC_Start>

  TIM8->DIER |= TIM_DIER_CC1DE;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <main+0x104>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <main+0x104>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800070a:	60d3      	str	r3, [r2, #12]
  TIM8->DIER |= TIM_DIER_UIE;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <main+0x104>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <main+0x104>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	60d3      	str	r3, [r2, #12]
  HAL_TIM_OC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	4818      	ldr	r0, [pc, #96]	@ (800077c <main+0x108>)
 800071c:	f002 faf8 	bl	8002d10 <HAL_TIM_OC_Start_IT>

  TIM2->DIER |= TIM_DIER_UDE;
 8000720:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800072e:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start(&htim2);
 8000730:	4813      	ldr	r0, [pc, #76]	@ (8000780 <main+0x10c>)
 8000732:	f002 fa29 	bl	8002b88 <HAL_TIM_Base_Start>

  while (1)
  {
	  DAC1_mon = DAC1->DHR12R1;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <main+0x110>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <main+0x114>)
 800073c:	6013      	str	r3, [r2, #0]
	  Seed_mon = lfsr;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <main+0x118>)
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <main+0x11c>)
 8000744:	801a      	strh	r2, [r3, #0]
	  DMA_CNT_mon = DMA1_Channel1->CNDTR;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <main+0x120>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <main+0x124>)
 800074c:	6013      	str	r3, [r2, #0]
	  TIM8_CNT_mon = TIM8->CNT;
 800074e:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <main+0x104>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <main+0x128>)
 8000754:	6013      	str	r3, [r2, #0]
	  TIM2_CNT_mon = TIM2->CNT;
 8000756:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800075a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800075c:	4a10      	ldr	r2, [pc, #64]	@ (80007a0 <main+0x12c>)
 800075e:	6013      	str	r3, [r2, #0]
	  DAC1_mon = DAC1->DHR12R1;
 8000760:	bf00      	nop
 8000762:	e7e8      	b.n	8000736 <main+0xc2>
 8000764:	20000038 	.word	0x20000038
 8000768:	20000154 	.word	0x20000154
 800076c:	50000808 	.word	0x50000808
 8000770:	200000f4 	.word	0x200000f4
 8000774:	20000048 	.word	0x20000048
 8000778:	40013400 	.word	0x40013400
 800077c:	200000a8 	.word	0x200000a8
 8000780:	2000005c 	.word	0x2000005c
 8000784:	50000800 	.word	0x50000800
 8000788:	20002158 	.word	0x20002158
 800078c:	20000000 	.word	0x20000000
 8000790:	20002168 	.word	0x20002168
 8000794:	40020008 	.word	0x40020008
 8000798:	2000215c 	.word	0x2000215c
 800079c:	20002160 	.word	0x20002160
 80007a0:	20002164 	.word	0x20002164

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2238      	movs	r2, #56	@ 0x38
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fb3b 	bl	8004e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ca:	f001 fba3 	bl	8001f14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80007e8:	234b      	movs	r3, #75	@ 0x4b
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0318 	add.w	r3, r7, #24
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fc3d 	bl	800207c <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000808:	f000 f9be 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2303      	movs	r3, #3
 8000812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2104      	movs	r1, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f001 ff3b 	bl	80026a0 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000830:	f000 f9aa 	bl	8000b88 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	@ 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2230      	movs	r2, #48	@ 0x30
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f004 faf0 	bl	8004e2e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_DAC1_Init+0x6c>)
 8000850:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <MX_DAC1_Init+0x70>)
 8000852:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000854:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <MX_DAC1_Init+0x6c>)
 8000856:	f000 fd40 	bl	80012da <HAL_DAC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000860:	f000 f992 	bl	8000b88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000864:	2302      	movs	r3, #2
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <MX_DAC1_Init+0x6c>)
 8000890:	f000 fdb2 	bl	80013f8 <HAL_DAC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800089a:	f000 f975 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	@ 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000048 	.word	0x20000048
 80008ac:	50000800 	.word	0x50000800

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008d8:	220e      	movs	r2, #14
 80008da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999999;
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008e4:	4a18      	ldr	r2, [pc, #96]	@ (8000948 <MX_TIM2_Init+0x98>)
 80008e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f4:	4813      	ldr	r0, [pc, #76]	@ (8000944 <MX_TIM2_Init+0x94>)
 80008f6:	f002 f8ef 	bl	8002ad8 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000900:	f000 f942 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000908:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_TIM2_Init+0x94>)
 8000912:	f002 fd6d 	bl	80033f0 <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800091c:	f000 f934 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000920:	2320      	movs	r3, #32
 8000922:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_TIM2_Init+0x94>)
 800092e:	f003 fbe5 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f926 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000005c 	.word	0x2000005c
 8000948:	0098967f 	.word	0x0098967f

0800094c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0a0      	sub	sp, #128	@ 0x80
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000960:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2234      	movs	r2, #52	@ 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fa49 	bl	8004e2e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800099c:	4b51      	ldr	r3, [pc, #324]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 800099e:	4a52      	ldr	r2, [pc, #328]	@ (8000ae8 <MX_TIM8_Init+0x19c>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 14;
 80009a2:	4b50      	ldr	r3, [pc, #320]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009a4:	220e      	movs	r2, #14
 80009a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80009ae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 4096;
 80009bc:	4b49      	ldr	r3, [pc, #292]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b47      	ldr	r3, [pc, #284]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009ca:	4846      	ldr	r0, [pc, #280]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009cc:	f002 f884 	bl	8002ad8 <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80009d6:	f000 f8d7 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009de:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009e0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80009e4:	4619      	mov	r1, r3
 80009e6:	483f      	ldr	r0, [pc, #252]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009e8:	f002 fd02 	bl	80033f0 <HAL_TIM_ConfigClockSource>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80009f2:	f000 f8c9 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80009f6:	483b      	ldr	r0, [pc, #236]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 80009f8:	f002 f928 	bl	8002c4c <HAL_TIM_OC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8000a02:	f000 f8c1 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a06:	2108      	movs	r1, #8
 8000a08:	4836      	ldr	r0, [pc, #216]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 8000a0a:	f002 facd 	bl	8002fa8 <HAL_TIM_OnePulse_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000a14:	f000 f8b8 	bl	8000b88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a18:	2306      	movs	r3, #6
 8000a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000a20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a24:	4619      	mov	r1, r3
 8000a26:	482f      	ldr	r0, [pc, #188]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 8000a28:	f002 fddc 	bl	80035e4 <HAL_TIM_SlaveConfigSynchro>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM8_Init+0xea>
  {
    Error_Handler();
 8000a32:	f000 f8a9 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000a36:	2330      	movs	r3, #48	@ 0x30
 8000a38:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a42:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a46:	4619      	mov	r1, r3
 8000a48:	4826      	ldr	r0, [pc, #152]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 8000a4a:	f003 fb57 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000a54:	f000 f898 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 999;
 8000a5c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 8000a80:	f002 fc3c 	bl	80032fc <HAL_TIM_OC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000a8a:	f000 f87d 	bl	8000b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_TIM8_Init+0x198>)
 8000acc:	f003 fb98 	bl	8004200 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8000ad6:	f000 f857 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3780      	adds	r7, #128	@ 0x80
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000a8 	.word	0x200000a8
 8000ae8:	40013400 	.word	0x40013400

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_DMA_Init+0x50>)
 8000af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000af6:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <MX_DMA_Init+0x50>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_DMA_Init+0x50>)
 8000b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_DMA_Init+0x50>)
 8000b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b3c <MX_DMA_Init+0x50>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_DMA_Init+0x50>)
 8000b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	200b      	movs	r0, #11
 8000b28:	f000 fba3 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b2c:	200b      	movs	r0, #11
 8000b2e:	f000 fbba 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_GPIO_Init+0x44>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <MX_GPIO_Init+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_GPIO_Init+0x44>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_GPIO_Init+0x44>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <MX_GPIO_Init+0x44>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_GPIO_Init+0x44>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bca:	f001 fa47 	bl	800205c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <HAL_DAC_MspInit+0x74>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d124      	bne.n	8000c48 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_DAC_MspInit+0x78>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <HAL_DAC_MspInit+0x78>)
 8000c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_DAC_MspInit+0x78>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_DAC_MspInit+0x78>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <HAL_DAC_MspInit+0x78>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <HAL_DAC_MspInit+0x78>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c44:	f000 ffcc 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	@ 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	50000800 	.word	0x50000800
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c68:	d10c      	bne.n	8000c84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc0>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc0>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc0>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000c82:	e044      	b.n	8000d0e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <HAL_TIM_Base_MspInit+0xc4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d13f      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc0>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc0>)
 8000c94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <HAL_TIM_Base_MspInit+0xc0>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Channel1;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <HAL_TIM_Base_MspInit+0xcc>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cae:	2231      	movs	r2, #49	@ 0x31
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cca:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8000ce2:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000ce4:	f000 fd42 	bl	800176c <HAL_DMA_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 8000cee:	f7ff ff4b 	bl	8000b88 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cf6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000cf8:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc8>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	202c      	movs	r0, #44	@ 0x2c
 8000d04:	f000 fab5 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000d08:	202c      	movs	r0, #44	@ 0x2c
 8000d0a:	f000 facc 	bl	80012a6 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40013400 	.word	0x40013400
 8000d20:	200000f4 	.word	0x200000f4
 8000d24:	40020008 	.word	0x40020008

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f97f 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <DMA1_Channel1_IRQHandler+0x10>)
 8000d8e:	f000 fdd8 	bl	8001942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000f4 	.word	0x200000f4

08000d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff ffea 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	@ (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f004 f827 	bl	8004e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fc3f 	bl	8000674 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   r0, =_estack
 8000df8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e04:	08004ee0 	.word	0x08004ee0
  ldr r2, =_sbss
 8000e08:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e0c:	20002204 	.word	0x20002204

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <BSP_LED_Init+0x64>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <BSP_LED_Init+0x64>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <BSP_LED_Init+0x64>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000e36:	2320      	movs	r3, #32
 8000e38:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <BSP_LED_Init+0x68>)
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	f107 020c 	add.w	r2, r7, #12
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fec3 	bl	8001be0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <BSP_LED_Init+0x68>)
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	2120      	movs	r1, #32
 8000e64:	2200      	movs	r2, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f83c 	bl	8001ee4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	2000000c 	.word	0x2000000c

08000e80 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d903      	bls.n	8000e9e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e96:	f06f 0301 	mvn.w	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e018      	b.n	8000ed0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2294      	movs	r2, #148	@ 0x94
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <BSP_COM_Init+0x5c>)
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f84a 	bl	8000f44 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2294      	movs	r2, #148	@ 0x94
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <BSP_COM_Init+0x5c>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f80e 	bl	8000ee0 <MX_LPUART1_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000eca:	f06f 0303 	mvn.w	r3, #3
 8000ece:	e000      	b.n	8000ed2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000216c 	.word	0x2000216c

08000ee0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <MX_LPUART1_Init+0x60>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	220c      	movs	r2, #12
 8000efe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	461a      	mov	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	899b      	ldrh	r3, [r3, #12]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f2c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f003 fa38 	bl	80043a4 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000010 	.word	0x20000010

08000f44 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000f64:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f68:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f80:	4a15      	ldr	r2, [pc, #84]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <COM1_MspInit+0x94>)
 8000f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000f94:	2304      	movs	r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb2:	f000 fe15 	bl	8001be0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fcc:	f000 fe08 	bl	8001be0 <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	@ 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe6:	2003      	movs	r0, #3
 8000fe8:	f000 f938 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 f80d 	bl	800100c <HAL_InitTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	e001      	b.n	8001002 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffe:	f7ff fdc9 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001002:	79fb      	ldrb	r3, [r7, #7]

}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_InitTick+0x68>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d022      	beq.n	8001066 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_InitTick+0x6c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_InitTick+0x68>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800102c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001030:	fbb2 f3f3 	udiv	r3, r2, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f944 	bl	80012c2 <HAL_SYSTICK_Config>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10f      	bne.n	8001060 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	d809      	bhi.n	800105a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001046:	2200      	movs	r2, #0
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800104e:	f000 f910 	bl	8001272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_InitTick+0x70>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e007      	b.n	800106a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e004      	b.n	800106a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e001      	b.n	800106a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000018 	.word	0x20000018
 8001078:	20000008 	.word	0x20000008
 800107c:	20000014 	.word	0x20000014

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_IncTick+0x1c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <HAL_IncTick+0x20>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4413      	add	r3, r2
 800108e:	4a03      	ldr	r2, [pc, #12]	@ (800109c <HAL_IncTick+0x1c>)
 8001090:	6013      	str	r3, [r2, #0]
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20002200 	.word	0x20002200
 80010a0:	20000018 	.word	0x20000018

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20002200 	.word	0x20002200

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	@ (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	@ (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff40 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff33 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa4 	bl	8001218 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e014      	b.n	8001316 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fc6d 	bl	8000bdc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2202      	movs	r2, #2
 8001306:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e056      	b.n	80013e2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_DAC_Start+0x20>
 800133c:	2302      	movs	r3, #2
 800133e:	e050      	b.n	80013e2 <HAL_DAC_Start+0xc2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2202      	movs	r2, #2
 800134a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2201      	movs	r2, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001364:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <HAL_DAC_Start+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_DAC_Start+0xd4>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8001376:	e002      	b.n	800137e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3b01      	subs	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001394:	2b02      	cmp	r3, #2
 8001396:	d11d      	bne.n	80013d4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	e014      	b.n	80013d4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2102      	movs	r1, #2
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d107      	bne.n	80013d4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0202 	orr.w	r2, r2, #2
 80013d2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	053e2d63 	.word	0x053e2d63

080013f8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_DAC_ConfigChannel+0x1c>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e1a1      	b.n	800175c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_DAC_ConfigChannel+0x32>
 8001426:	2302      	movs	r3, #2
 8001428:	e198      	b.n	800175c <HAL_DAC_ConfigChannel+0x364>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2202      	movs	r2, #2
 8001434:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b04      	cmp	r3, #4
 800143c:	d17a      	bne.n	8001534 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800143e:	f7ff fe31 	bl	80010a4 <HAL_GetTick>
 8001442:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d13d      	bne.n	80014c6 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800144a:	e018      	b.n	800147e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800144c:	f7ff fe2a 	bl	80010a4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d911      	bls.n	800147e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00a      	beq.n	800147e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	f043 0208 	orr.w	r2, r3, #8
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2203      	movs	r2, #3
 8001478:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e16e      	b.n	800175c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1df      	bne.n	800144c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40
 8001496:	e020      	b.n	80014da <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001498:	f7ff fe04 	bl	80010a4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d90f      	bls.n	80014c6 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da0a      	bge.n	80014c6 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	f043 0208 	orr.w	r2, r3, #8
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2203      	movs	r2, #3
 80014c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e14a      	b.n	800175c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dbe3      	blt.n	8001498 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	ea02 0103 	and.w	r1, r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	21ff      	movs	r1, #255	@ 0xff
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	ea02 0103 	and.w	r1, r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d11d      	bne.n	8001578 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	221f      	movs	r2, #31
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	4013      	ands	r3, r2
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156c:	4313      	orrs	r3, r2
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001576:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2207      	movs	r2, #7
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001590:	4013      	ands	r3, r2
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d102      	bne.n	80015a2 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	e00f      	b.n	80015c2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d102      	bne.n	80015b0 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80015aa:	2301      	movs	r3, #1
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	e008      	b.n	80015c2 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	e001      	b.n	80015c2 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e4:	4013      	ands	r3, r2
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	791b      	ldrb	r3, [r3, #4]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d102      	bne.n	80015f6 <HAL_DAC_ConfigChannel+0x1fe>
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	e000      	b.n	80015f8 <HAL_DAC_ConfigChannel+0x200>
 80015f6:	2300      	movs	r3, #0
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001610:	4013      	ands	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	795b      	ldrb	r3, [r3, #5]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_DAC_ConfigChannel+0x22a>
 800161c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001620:	e000      	b.n	8001624 <HAL_DAC_ConfigChannel+0x22c>
 8001622:	2300      	movs	r3, #0
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4313      	orrs	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d114      	bne.n	8001664 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800163a:	f001 f9cf 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 800163e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4a48      	ldr	r2, [pc, #288]	@ (8001764 <HAL_DAC_ConfigChannel+0x36c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d904      	bls.n	8001652 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001650:	e00f      	b.n	8001672 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4a44      	ldr	r2, [pc, #272]	@ (8001768 <HAL_DAC_ConfigChannel+0x370>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d90a      	bls.n	8001670 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
 8001662:	e006      	b.n	8001672 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166a:	4313      	orrs	r3, r2
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
 800166e:	e000      	b.n	8001672 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001670:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4313      	orrs	r3, r2
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43da      	mvns	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c4:	4013      	ands	r3, r2
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016dc:	4313      	orrs	r3, r2
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	22c0      	movs	r2, #192	@ 0xc0
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	ea02 0103 	and.w	r1, r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	409a      	lsls	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800175a:	7ffb      	ldrb	r3, [r7, #31]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	09896800 	.word	0x09896800
 8001768:	04c4b400 	.word	0x04c4b400

0800176c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e08d      	b.n	800189a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b47      	ldr	r3, [pc, #284]	@ (80018a4 <HAL_DMA_Init+0x138>)
 8001786:	429a      	cmp	r2, r3
 8001788:	d80f      	bhi.n	80017aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	4b45      	ldr	r3, [pc, #276]	@ (80018a8 <HAL_DMA_Init+0x13c>)
 8001792:	4413      	add	r3, r2
 8001794:	4a45      	ldr	r2, [pc, #276]	@ (80018ac <HAL_DMA_Init+0x140>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	009a      	lsls	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a42      	ldr	r2, [pc, #264]	@ (80018b0 <HAL_DMA_Init+0x144>)
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a8:	e00e      	b.n	80017c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <HAL_DMA_Init+0x148>)
 80017b2:	4413      	add	r3, r2
 80017b4:	4a3d      	ldr	r2, [pc, #244]	@ (80018ac <HAL_DMA_Init+0x140>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	009a      	lsls	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a3c      	ldr	r2, [pc, #240]	@ (80018b8 <HAL_DMA_Init+0x14c>)
 80017c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f97e 	bl	8001b1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001828:	d102      	bne.n	8001830 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001844:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_DMA_Init+0x104>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d80c      	bhi.n	8001870 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f99e 	bl	8001b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e008      	b.n	8001882 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020407 	.word	0x40020407
 80018a8:	bffdfff8 	.word	0xbffdfff8
 80018ac:	cccccccd 	.word	0xcccccccd
 80018b0:	40020000 	.word	0x40020000
 80018b4:	bffdfbf8 	.word	0xbffdfbf8
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_DMA_Start+0x20>
 80018d8:	2302      	movs	r3, #2
 80018da:	e02e      	b.n	800193a <HAL_DMA_Start+0x7e>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d11d      	bne.n	800192c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f8c3 	bl	8001aa0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e005      	b.n	8001938 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8001934:	2302      	movs	r3, #2
 8001936:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2204      	movs	r2, #4
 8001964:	409a      	lsls	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d026      	beq.n	80019bc <HAL_DMA_IRQHandler+0x7a>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d021      	beq.n	80019bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0204 	bic.w	r2, r2, #4
 8001994:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f003 021f 	and.w	r2, r3, #31
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	2104      	movs	r1, #4
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d071      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019ba:	e06c      	b.n	8001a96 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2202      	movs	r2, #2
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02e      	beq.n	8001a2e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d029      	beq.n	8001a2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 020a 	bic.w	r2, r2, #10
 80019f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d038      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a2c:	e033      	b.n	8001a96 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2208      	movs	r2, #8
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d02a      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d025      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020e 	bic.w	r2, r2, #14
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
}
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ab6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ac8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f003 021f 	and.w	r2, r3, #31
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d108      	bne.n	8001b00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001afe:	e007      	b.n	8001b10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	60da      	str	r2, [r3, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d802      	bhi.n	8001b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e001      	b.n	8001b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b38:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3b08      	subs	r3, #8
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	@ (8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b76:	bf00      	nop
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40020407 	.word	0x40020407
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020820 	.word	0x40020820
 8001b90:	cccccccd 	.word	0xcccccccd
 8001b94:	40020880 	.word	0x40020880

08001b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a08      	ldr	r2, [pc, #32]	@ (8001bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	1000823f 	.word	0x1000823f
 8001bdc:	40020940 	.word	0x40020940

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bee:	e15a      	b.n	8001ea6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 814c 	beq.w	8001ea0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d005      	beq.n	8001c20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d130      	bne.n	8001c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c56:	2201      	movs	r2, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 0201 	and.w	r2, r3, #1
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d017      	beq.n	8001cbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d123      	bne.n	8001d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	6939      	ldr	r1, [r7, #16]
 8001d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0203 	and.w	r2, r3, #3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80a6 	beq.w	8001ea0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d54:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec4 <HAL_GPIO_Init+0x2e4>)
 8001d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d58:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec4 <HAL_GPIO_Init+0x2e4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d60:	4b58      	ldr	r3, [pc, #352]	@ (8001ec4 <HAL_GPIO_Init+0x2e4>)
 8001d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6c:	4a56      	ldr	r2, [pc, #344]	@ (8001ec8 <HAL_GPIO_Init+0x2e8>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d96:	d01f      	beq.n	8001dd8 <HAL_GPIO_Init+0x1f8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001ecc <HAL_GPIO_Init+0x2ec>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d019      	beq.n	8001dd4 <HAL_GPIO_Init+0x1f4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed0 <HAL_GPIO_Init+0x2f0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_GPIO_Init+0x1f0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed4 <HAL_GPIO_Init+0x2f4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00d      	beq.n	8001dcc <HAL_GPIO_Init+0x1ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a49      	ldr	r2, [pc, #292]	@ (8001ed8 <HAL_GPIO_Init+0x2f8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <HAL_GPIO_Init+0x1e8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a48      	ldr	r2, [pc, #288]	@ (8001edc <HAL_GPIO_Init+0x2fc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_GPIO_Init+0x1e4>
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	e00a      	b.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	e008      	b.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1fa>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dea:	4937      	ldr	r1, [pc, #220]	@ (8001ec8 <HAL_GPIO_Init+0x2e8>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <HAL_GPIO_Init+0x300>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f ae9d 	bne.w	8001bf0 <HAL_GPIO_Init+0x10>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000c00 	.word	0x48000c00
 8001ed8:	48001000 	.word	0x48001000
 8001edc:	48001400 	.word	0x48001400
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d141      	bne.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f22:	4b4b      	ldr	r3, [pc, #300]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2e:	d131      	bne.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f30:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f36:	4a46      	ldr	r2, [pc, #280]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f40:	4b43      	ldr	r3, [pc, #268]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f48:	4a41      	ldr	r2, [pc, #260]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f50:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2232      	movs	r2, #50	@ 0x32
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f66:	e002      	b.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7a:	d102      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f2      	bne.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f82:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8e:	d158      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e057      	b.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f94:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fa4:	e04d      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fac:	d141      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fae:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	d131      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fbc:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fc2:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2232      	movs	r2, #50	@ 0x32
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff2:	e002      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002006:	d102      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f2      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201a:	d112      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e011      	b.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002030:	e007      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002040:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40007000 	.word	0x40007000
 8002054:	20000008 	.word	0x20000008
 8002058:	431bde83 	.word	0x431bde83

0800205c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206a:	6093      	str	r3, [r2, #8]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40007000 	.word	0x40007000

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e2fe      	b.n	800268c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d075      	beq.n	8002186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209a:	4b97      	ldr	r3, [pc, #604]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a4:	4b94      	ldr	r3, [pc, #592]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0x3e>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_OscConfig+0x44>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d10b      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	4b8d      	ldr	r3, [pc, #564]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d05b      	beq.n	8002184 <HAL_RCC_OscConfig+0x108>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d157      	bne.n	8002184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e2d9      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x74>
 80020e2:	4b85      	ldr	r3, [pc, #532]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a84      	ldr	r2, [pc, #528]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xb0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7f      	ldr	r3, [pc, #508]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7e      	ldr	r2, [pc, #504]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b7c      	ldr	r3, [pc, #496]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7b      	ldr	r2, [pc, #492]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xb0>
 8002114:	4b78      	ldr	r3, [pc, #480]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a77      	ldr	r2, [pc, #476]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b75      	ldr	r3, [pc, #468]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a74      	ldr	r2, [pc, #464]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ffb6 	bl	80010a4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7fe ffb2 	bl	80010a4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	@ 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e29e      	b.n	800268c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	4b6a      	ldr	r3, [pc, #424]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xc0>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe ffa2 	bl	80010a4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe ff9e 	bl	80010a4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	@ 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e28a      	b.n	800268c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	4b60      	ldr	r3, [pc, #384]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0xe8>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d075      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219c:	4b56      	ldr	r3, [pc, #344]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b0c      	cmp	r3, #12
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_OscConfig+0x136>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_OscConfig+0x13c>
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d11f      	bne.n	80021f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b4f      	ldr	r3, [pc, #316]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x154>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e25d      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b49      	ldr	r3, [pc, #292]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4946      	ldr	r1, [pc, #280]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021e4:	4b45      	ldr	r3, [pc, #276]	@ (80022fc <HAL_RCC_OscConfig+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe ff0f 	bl	800100c <HAL_InitTick>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d043      	beq.n	800227c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e249      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d023      	beq.n	8002248 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a3c      	ldr	r2, [pc, #240]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe ff4a 	bl	80010a4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7fe ff46 	bl	80010a4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e232      	b.n	800268c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002226:	4b34      	ldr	r3, [pc, #208]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	492d      	ldr	r1, [pc, #180]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
 8002246:	e01a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002248:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2a      	ldr	r2, [pc, #168]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800224e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe ff26 	bl	80010a4 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe ff22 	bl	80010a4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e20e      	b.n	800268c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800226e:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1e0>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d041      	beq.n	800230e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 8002294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a2:	f7fe feff 	bl	80010a4 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022aa:	f7fe fefb 	bl	80010a4 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1e7      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ef      	beq.n	80022aa <HAL_RCC_OscConfig+0x22e>
 80022ca:	e020      	b.n	800230e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d2:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fee2 	bl	80010a4 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e2:	e00d      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe fede 	bl	80010a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d906      	bls.n	8002300 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1ca      	b.n	800268c <HAL_RCC_OscConfig+0x610>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002300:	4b8c      	ldr	r3, [pc, #560]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ea      	bne.n	80022e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a6 	beq.w	8002468 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002320:	4b84      	ldr	r3, [pc, #528]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_OscConfig+0x2b4>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x2b6>
 8002330:	2300      	movs	r3, #0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b7f      	ldr	r3, [pc, #508]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	4a7e      	ldr	r2, [pc, #504]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002340:	6593      	str	r3, [r2, #88]	@ 0x58
 8002342:	4b7c      	ldr	r3, [pc, #496]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002352:	4b79      	ldr	r3, [pc, #484]	@ (8002538 <HAL_RCC_OscConfig+0x4bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <HAL_RCC_OscConfig+0x4bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_RCC_OscConfig+0x4bc>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe fe9b 	bl	80010a4 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe fe97 	bl	80010a4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e183      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002384:	4b6c      	ldr	r3, [pc, #432]	@ (8002538 <HAL_RCC_OscConfig+0x4bc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_RCC_OscConfig+0x32e>
 8002398:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	4a65      	ldr	r2, [pc, #404]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a8:	e024      	b.n	80023f4 <HAL_RCC_OscConfig+0x378>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d110      	bne.n	80023d4 <HAL_RCC_OscConfig+0x358>
 80023b2:	4b60      	ldr	r3, [pc, #384]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d2:	e00f      	b.n	80023f4 <HAL_RCC_OscConfig+0x378>
 80023d4:	4b57      	ldr	r3, [pc, #348]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	4a56      	ldr	r2, [pc, #344]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ea:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fe52 	bl	80010a4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fe4e 	bl	80010a4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e138      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	4b46      	ldr	r3, [pc, #280]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ed      	beq.n	8002404 <HAL_RCC_OscConfig+0x388>
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fe3b 	bl	80010a4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fe37 	bl	80010a4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e121      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002448:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ed      	bne.n	8002432 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b35      	ldr	r3, [pc, #212]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	4a34      	ldr	r2, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002466:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03c      	beq.n	80024ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800247c:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002482:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe fe0a 	bl	80010a4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002494:	f7fe fe06 	bl	80010a4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0f2      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a6:	4b23      	ldr	r3, [pc, #140]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80024a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCC_OscConfig+0x418>
 80024b4:	e01b      	b.n	80024ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fded 	bl	80010a4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7fe fde9 	bl	80010a4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0d5      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80c9 	beq.w	800268a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b0c      	cmp	r3, #12
 8002502:	f000 8083 	beq.w	800260c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d15e      	bne.n	80025cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a08      	ldr	r2, [pc, #32]	@ (8002534 <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe fdc3 	bl	80010a4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002520:	e00c      	b.n	800253c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe fdbf 	bl	80010a4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d905      	bls.n	800253c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0ab      	b.n	800268c <HAL_RCC_OscConfig+0x610>
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ec      	bne.n	8002522 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4b52      	ldr	r3, [pc, #328]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b52      	ldr	r3, [pc, #328]	@ (8002698 <HAL_RCC_OscConfig+0x61c>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6a11      	ldr	r1, [r2, #32]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002558:	3a01      	subs	r2, #1
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002562:	0212      	lsls	r2, r2, #8
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800256a:	0852      	lsrs	r2, r2, #1
 800256c:	3a01      	subs	r2, #1
 800256e:	0552      	lsls	r2, r2, #21
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002576:	0852      	lsrs	r2, r2, #1
 8002578:	3a01      	subs	r2, #1
 800257a:	0652      	lsls	r2, r2, #25
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002582:	06d2      	lsls	r2, r2, #27
 8002584:	430a      	orrs	r2, r1
 8002586:	4943      	ldr	r1, [pc, #268]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a40      	ldr	r2, [pc, #256]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002596:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002598:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a3d      	ldr	r2, [pc, #244]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fd7e 	bl	80010a4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fd7a 	bl	80010a4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e066      	b.n	800268c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025be:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x530>
 80025ca:	e05e      	b.n	800268a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a30      	ldr	r2, [pc, #192]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 80025d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd64 	bl	80010a4 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fd60 	bl	80010a4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04c      	b.n	800268c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	4924      	ldr	r1, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 8002604:	4b25      	ldr	r3, [pc, #148]	@ (800269c <HAL_RCC_OscConfig+0x620>)
 8002606:	4013      	ands	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
 800260a:	e03e      	b.n	800268a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e039      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_RCC_OscConfig+0x618>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d12c      	bne.n	8002686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	3b01      	subs	r3, #1
 8002638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d123      	bne.n	8002686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d11b      	bne.n	8002686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d113      	bne.n	8002686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d109      	bne.n	8002686 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	019f800c 	.word	0x019f800c
 800269c:	feeefffc 	.word	0xfeeefffc

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e11e      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b8e      	ldr	r3, [pc, #568]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	498c      	ldr	r1, [pc, #560]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e106      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d073      	beq.n	80027dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d129      	bne.n	8002750 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b81      	ldr	r3, [pc, #516]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0f4      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800270c:	f000 f99e 	bl	8002a4c <RCC_GetSysClockFreqFromPLLSource>
 8002710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a7c      	ldr	r2, [pc, #496]	@ (8002908 <HAL_RCC_ClockConfig+0x268>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d93f      	bls.n	800279a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800271a:	4b7a      	ldr	r3, [pc, #488]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800272e:	2b00      	cmp	r3, #0
 8002730:	d033      	beq.n	800279a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d12f      	bne.n	800279a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800273a:	4b72      	ldr	r3, [pc, #456]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002742:	4a70      	ldr	r2, [pc, #448]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e024      	b.n	800279a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002758:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0c6      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	4b66      	ldr	r3, [pc, #408]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0be      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002778:	f000 f8ce 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800277c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4a61      	ldr	r2, [pc, #388]	@ (8002908 <HAL_RCC_ClockConfig+0x268>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d909      	bls.n	800279a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002786:	4b5f      	ldr	r3, [pc, #380]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800278e:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002794:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b5a      	ldr	r3, [pc, #360]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4957      	ldr	r1, [pc, #348]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe fc7a 	bl	80010a4 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe fc76 	bl	80010a4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e095      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d023      	beq.n	8002830 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f4:	4b43      	ldr	r3, [pc, #268]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800280c:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002814:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800281a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4936      	ldr	r1, [pc, #216]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
 800282e:	e008      	b.n	8002842 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b80      	cmp	r3, #128	@ 0x80
 8002834:	d105      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002836:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800283c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002840:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002842:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d21d      	bcs.n	800288c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 020f 	bic.w	r2, r3, #15
 8002858:	4929      	ldr	r1, [pc, #164]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002860:	f7fe fc20 	bl	80010a4 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fc1c 	bl	80010a4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03b      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d1ed      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4917      	ldr	r1, [pc, #92]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490f      	ldr	r1, [pc, #60]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028ca:	f000 f825 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490c      	ldr	r1, [pc, #48]	@ (800290c <HAL_RCC_ClockConfig+0x26c>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb8c 	bl	800100c <HAL_InitTick>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	04c4b400 	.word	0x04c4b400
 800290c:	08004ea0 	.word	0x08004ea0
 8002910:	20000008 	.word	0x20000008
 8002914:	20000014 	.word	0x20000014

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800291e:	4b2c      	ldr	r3, [pc, #176]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d102      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292a:	4b2a      	ldr	r3, [pc, #168]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e047      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002930:	4b27      	ldr	r3, [pc, #156]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d102      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800293c:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	e03e      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d136      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800294e:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002958:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d10c      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800296c:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	4a16      	ldr	r2, [pc, #88]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002976:	68d2      	ldr	r2, [r2, #12]
 8002978:	0a12      	lsrs	r2, r2, #8
 800297a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
      break;
 8002984:	e00c      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002986:	4a13      	ldr	r2, [pc, #76]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4a10      	ldr	r2, [pc, #64]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	0a12      	lsrs	r2, r2, #8
 8002994:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
      break;
 800299e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0e5b      	lsrs	r3, r3, #25
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e001      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029c0:	693b      	ldr	r3, [r7, #16]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008

080029f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029f8:	f7ff fff0 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4904      	ldr	r1, [pc, #16]	@ (8002a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08004eb0 	.word	0x08004eb0

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a24:	f7ff ffda 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0adb      	lsrs	r3, r3, #11
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4904      	ldr	r1, [pc, #16]	@ (8002a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08004eb0 	.word	0x08004eb0

08002a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a52:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d10c      	bne.n	8002a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a70:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	0a12      	lsrs	r2, r2, #8
 8002a7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
    break;
 8002a88:	e00c      	b.n	8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	0a12      	lsrs	r2, r2, #8
 8002a98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
    break;
 8002aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0e5b      	lsrs	r3, r3, #25
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002abe:	687b      	ldr	r3, [r7, #4]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	007a1200 	.word	0x007a1200
 8002ad4:	00f42400 	.word	0x00f42400

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e049      	b.n	8002b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe f8aa 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fdd8 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d001      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e042      	b.n	8002c26 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a21      	ldr	r2, [pc, #132]	@ (8002c34 <HAL_TIM_Base_Start+0xac>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <HAL_TIM_Base_Start+0x5c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bba:	d013      	beq.n	8002be4 <HAL_TIM_Base_Start+0x5c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <HAL_TIM_Base_Start+0xb0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00e      	beq.n	8002be4 <HAL_TIM_Base_Start+0x5c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_TIM_Base_Start+0xb4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_TIM_Base_Start+0x5c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c40 <HAL_TIM_Base_Start+0xb8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIM_Base_Start+0x5c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_TIM_Base_Start+0xbc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d115      	bne.n	8002c10 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4b17      	ldr	r3, [pc, #92]	@ (8002c48 <HAL_TIM_Base_Start+0xc0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d015      	beq.n	8002c22 <HAL_TIM_Base_Start+0x9a>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d011      	beq.n	8002c22 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	e008      	b.n	8002c22 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e000      	b.n	8002c24 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40000800 	.word	0x40000800
 8002c40:	40013400 	.word	0x40013400
 8002c44:	40014000 	.word	0x40014000
 8002c48:	00010007 	.word	0x00010007

08002c4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e049      	b.n	8002cf2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f841 	bl	8002cfa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 fd1e 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_TIM_OC_Start_IT+0x28>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e03c      	b.n	8002db2 <HAL_TIM_OC_Start_IT+0xa2>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d109      	bne.n	8002d52 <HAL_TIM_OC_Start_IT+0x42>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e02f      	b.n	8002db2 <HAL_TIM_OC_Start_IT+0xa2>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_OC_Start_IT+0x5c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e022      	b.n	8002db2 <HAL_TIM_OC_Start_IT+0xa2>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d109      	bne.n	8002d86 <HAL_TIM_OC_Start_IT+0x76>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e015      	b.n	8002db2 <HAL_TIM_OC_Start_IT+0xa2>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_OC_Start_IT+0x90>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e008      	b.n	8002db2 <HAL_TIM_OC_Start_IT+0xa2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e2      	b.n	8002f80 <HAL_TIM_OC_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_OC_Start_IT+0xba>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc8:	e023      	b.n	8002e12 <HAL_TIM_OC_Start_IT+0x102>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_OC_Start_IT+0xca>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd8:	e01b      	b.n	8002e12 <HAL_TIM_OC_Start_IT+0x102>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_OC_Start_IT+0xda>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de8:	e013      	b.n	8002e12 <HAL_TIM_OC_Start_IT+0x102>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_OC_Start_IT+0xea>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002df8:	e00b      	b.n	8002e12 <HAL_TIM_OC_Start_IT+0x102>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_OC_Start_IT+0xfa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e08:	e003      	b.n	8002e12 <HAL_TIM_OC_Start_IT+0x102>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d841      	bhi.n	8002e9c <HAL_TIM_OC_Start_IT+0x18c>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <HAL_TIM_OC_Start_IT+0x110>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002e9d 	.word	0x08002e9d
 8002e28:	08002e9d 	.word	0x08002e9d
 8002e2c:	08002e9d 	.word	0x08002e9d
 8002e30:	08002e67 	.word	0x08002e67
 8002e34:	08002e9d 	.word	0x08002e9d
 8002e38:	08002e9d 	.word	0x08002e9d
 8002e3c:	08002e9d 	.word	0x08002e9d
 8002e40:	08002e79 	.word	0x08002e79
 8002e44:	08002e9d 	.word	0x08002e9d
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002e9d 	.word	0x08002e9d
 8002e50:	08002e8b 	.word	0x08002e8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0202 	orr.w	r2, r2, #2
 8002e62:	60da      	str	r2, [r3, #12]
      break;
 8002e64:	e01d      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0204 	orr.w	r2, r2, #4
 8002e74:	60da      	str	r2, [r3, #12]
      break;
 8002e76:	e014      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0208 	orr.w	r2, r2, #8
 8002e86:	60da      	str	r2, [r3, #12]
      break;
 8002e88:	e00b      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0210 	orr.w	r2, r2, #16
 8002e98:	60da      	str	r2, [r3, #12]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16a      	bne.n	8002f7e <HAL_TIM_OC_Start_IT+0x26e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 f8fd 	bl	80040b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	@ (8002f88 <HAL_TIM_OC_Start_IT+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_TIM_OC_Start_IT+0x1d8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a31      	ldr	r2, [pc, #196]	@ (8002f8c <HAL_TIM_OC_Start_IT+0x27c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_TIM_OC_Start_IT+0x1d8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a30      	ldr	r2, [pc, #192]	@ (8002f90 <HAL_TIM_OC_Start_IT+0x280>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_TIM_OC_Start_IT+0x1d8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f94 <HAL_TIM_OC_Start_IT+0x284>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIM_OC_Start_IT+0x1d8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f98 <HAL_TIM_OC_Start_IT+0x288>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_OC_Start_IT+0x1dc>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_TIM_OC_Start_IT+0x1de>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a20      	ldr	r2, [pc, #128]	@ (8002f88 <HAL_TIM_OC_Start_IT+0x278>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_TIM_OC_Start_IT+0x22e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d013      	beq.n	8002f3e <HAL_TIM_OC_Start_IT+0x22e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a20      	ldr	r2, [pc, #128]	@ (8002f9c <HAL_TIM_OC_Start_IT+0x28c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_TIM_OC_Start_IT+0x22e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa0 <HAL_TIM_OC_Start_IT+0x290>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_TIM_OC_Start_IT+0x22e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_TIM_OC_Start_IT+0x27c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_OC_Start_IT+0x22e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a15      	ldr	r2, [pc, #84]	@ (8002f90 <HAL_TIM_OC_Start_IT+0x280>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d115      	bne.n	8002f6a <HAL_TIM_OC_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b17      	ldr	r3, [pc, #92]	@ (8002fa4 <HAL_TIM_OC_Start_IT+0x294>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d015      	beq.n	8002f7c <HAL_TIM_OC_Start_IT+0x26c>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f56:	d011      	beq.n	8002f7c <HAL_TIM_OC_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	e008      	b.n	8002f7c <HAL_TIM_OC_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_TIM_OC_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	00010007 	.word	0x00010007

08002fa8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e041      	b.n	8003040 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f839 	bl	8003048 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 fb6f 	bl	80036cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0208 	bic.w	r2, r2, #8
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0202 	mvn.w	r2, #2
 8003090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 faf2 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fae4 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 faf5 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0204 	mvn.w	r2, #4
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 facc 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fabe 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 facf 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d020      	beq.n	8003158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0208 	mvn.w	r2, #8
 8003128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2204      	movs	r2, #4
 800312e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 faa6 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa98 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 faa9 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d020      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01b      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0210 	mvn.w	r2, #16
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2208      	movs	r2, #8
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa80 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa72 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fa83 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa50 	bl	8003668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f001 f89b 	bl	800432c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f001 f893 	bl	8004340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00c      	beq.n	800323e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fa3d 	bl	80036b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0220 	mvn.w	r2, #32
 800325a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f001 f85b 	bl	8004318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800327e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f001 f867 	bl	8004354 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00c      	beq.n	80032aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80032a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f001 f85f 	bl	8004368 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00c      	beq.n	80032ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80032c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f001 f857 	bl	800437c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00c      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80032ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f001 f84f 	bl	8004390 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003316:	2302      	movs	r3, #2
 8003318:	e066      	b.n	80033e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b14      	cmp	r3, #20
 8003326:	d857      	bhi.n	80033d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <HAL_TIM_OC_ConfigChannel+0x34>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003385 	.word	0x08003385
 8003334:	080033d9 	.word	0x080033d9
 8003338:	080033d9 	.word	0x080033d9
 800333c:	080033d9 	.word	0x080033d9
 8003340:	08003393 	.word	0x08003393
 8003344:	080033d9 	.word	0x080033d9
 8003348:	080033d9 	.word	0x080033d9
 800334c:	080033d9 	.word	0x080033d9
 8003350:	080033a1 	.word	0x080033a1
 8003354:	080033d9 	.word	0x080033d9
 8003358:	080033d9 	.word	0x080033d9
 800335c:	080033d9 	.word	0x080033d9
 8003360:	080033af 	.word	0x080033af
 8003364:	080033d9 	.word	0x080033d9
 8003368:	080033d9 	.word	0x080033d9
 800336c:	080033d9 	.word	0x080033d9
 8003370:	080033bd 	.word	0x080033bd
 8003374:	080033d9 	.word	0x080033d9
 8003378:	080033d9 	.word	0x080033d9
 800337c:	080033d9 	.word	0x080033d9
 8003380:	080033cb 	.word	0x080033cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fa3a 	bl	8003804 <TIM_OC1_SetConfig>
      break;
 8003390:	e025      	b.n	80033de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fac3 	bl	8003924 <TIM_OC2_SetConfig>
      break;
 800339e:	e01e      	b.n	80033de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fb46 	bl	8003a38 <TIM_OC3_SetConfig>
      break;
 80033ac:	e017      	b.n	80033de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fbc7 	bl	8003b48 <TIM_OC4_SetConfig>
      break;
 80033ba:	e010      	b.n	80033de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fc4a 	bl	8003c5c <TIM_OC5_SetConfig>
      break;
 80033c8:	e009      	b.n	80033de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fca7 	bl	8003d24 <TIM_OC6_SetConfig>
      break;
 80033d6:	e002      	b.n	80033de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	75fb      	strb	r3, [r7, #23]
      break;
 80033dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIM_ConfigClockSource+0x1c>
 8003408:	2302      	movs	r3, #2
 800340a:	e0de      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x1da>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800342a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a63      	ldr	r2, [pc, #396]	@ (80035d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	f000 80a9 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 800344c:	4a61      	ldr	r2, [pc, #388]	@ (80035d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	f200 80ae 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003454:	4a60      	ldr	r2, [pc, #384]	@ (80035d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f000 80a1 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 800345c:	4a5e      	ldr	r2, [pc, #376]	@ (80035d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f200 80a6 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003464:	4a5d      	ldr	r2, [pc, #372]	@ (80035dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	f000 8099 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 800346c:	4a5b      	ldr	r2, [pc, #364]	@ (80035dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f200 809e 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003474:	4a5a      	ldr	r2, [pc, #360]	@ (80035e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	f000 8091 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 800347c:	4a58      	ldr	r2, [pc, #352]	@ (80035e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	f200 8096 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003484:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003488:	f000 8089 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 800348c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003490:	f200 808e 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003498:	d03e      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x128>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349e:	f200 8087 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a6:	f000 8086 	beq.w	80035b6 <HAL_TIM_ConfigClockSource+0x1c6>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ae:	d87f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034b0:	2b70      	cmp	r3, #112	@ 0x70
 80034b2:	d01a      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xfa>
 80034b4:	2b70      	cmp	r3, #112	@ 0x70
 80034b6:	d87b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d050      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x16e>
 80034bc:	2b60      	cmp	r3, #96	@ 0x60
 80034be:	d877      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034c0:	2b50      	cmp	r3, #80	@ 0x50
 80034c2:	d03c      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x14e>
 80034c4:	2b50      	cmp	r3, #80	@ 0x50
 80034c6:	d873      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d058      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x18e>
 80034cc:	2b40      	cmp	r3, #64	@ 0x40
 80034ce:	d86f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d064      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 80034d4:	2b30      	cmp	r3, #48	@ 0x30
 80034d6:	d86b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d060      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d867      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d05a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x1ae>
 80034e8:	e062      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fa:	f000 fdb9 	bl	8004070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800350c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
      break;
 8003516:	e04f      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003528:	f000 fda2 	bl	8004070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e03c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 fd14 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	@ 0x50
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fd6d 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 800355c:	e02c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800356a:	461a      	mov	r2, r3
 800356c:	f000 fd33 	bl	8003fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	@ 0x60
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fd5d 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 800357c:	e01c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	461a      	mov	r2, r3
 800358c:	f000 fcf4 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	@ 0x40
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd4d 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 800359c:	e00c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 fd44 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 80035ae:	e003      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e000      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80035b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	00100070 	.word	0x00100070
 80035d8:	00100040 	.word	0x00100040
 80035dc:	00100030 	.word	0x00100030
 80035e0:	00100020 	.word	0x00100020

080035e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e031      	b.n	8003660 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fbee 	bl	8003df0 <TIM_SlaveTimer_SetConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e018      	b.n	8003660 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800363c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800364c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a42      	ldr	r2, [pc, #264]	@ (80037e8 <TIM_Base_SetConfig+0x11c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00f      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ea:	d00b      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	@ (80037ec <TIM_Base_SetConfig+0x120>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3e      	ldr	r2, [pc, #248]	@ (80037f0 <TIM_Base_SetConfig+0x124>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3d      	ldr	r2, [pc, #244]	@ (80037f4 <TIM_Base_SetConfig+0x128>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a33      	ldr	r2, [pc, #204]	@ (80037e8 <TIM_Base_SetConfig+0x11c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01b      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003724:	d017      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a30      	ldr	r2, [pc, #192]	@ (80037ec <TIM_Base_SetConfig+0x120>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a2f      	ldr	r2, [pc, #188]	@ (80037f0 <TIM_Base_SetConfig+0x124>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a2e      	ldr	r2, [pc, #184]	@ (80037f4 <TIM_Base_SetConfig+0x128>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2d      	ldr	r2, [pc, #180]	@ (80037f8 <TIM_Base_SetConfig+0x12c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <TIM_Base_SetConfig+0x130>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <TIM_Base_SetConfig+0x134>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a16      	ldr	r2, [pc, #88]	@ (80037e8 <TIM_Base_SetConfig+0x11c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <TIM_Base_SetConfig+0xe8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a17      	ldr	r2, [pc, #92]	@ (80037f4 <TIM_Base_SetConfig+0x128>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00b      	beq.n	80037b4 <TIM_Base_SetConfig+0xe8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a16      	ldr	r2, [pc, #88]	@ (80037f8 <TIM_Base_SetConfig+0x12c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_Base_SetConfig+0xe8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <TIM_Base_SetConfig+0x130>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0xe8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a14      	ldr	r2, [pc, #80]	@ (8003800 <TIM_Base_SetConfig+0x134>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]
  }
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40013400 	.word	0x40013400
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800

08003804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0201 	bic.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a2c      	ldr	r2, [pc, #176]	@ (8003910 <TIM_OC1_SetConfig+0x10c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00f      	beq.n	8003884 <TIM_OC1_SetConfig+0x80>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a2b      	ldr	r2, [pc, #172]	@ (8003914 <TIM_OC1_SetConfig+0x110>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_OC1_SetConfig+0x80>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <TIM_OC1_SetConfig+0x114>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_OC1_SetConfig+0x80>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a29      	ldr	r2, [pc, #164]	@ (800391c <TIM_OC1_SetConfig+0x118>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC1_SetConfig+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a28      	ldr	r2, [pc, #160]	@ (8003920 <TIM_OC1_SetConfig+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003910 <TIM_OC1_SetConfig+0x10c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_OC1_SetConfig+0xc2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003914 <TIM_OC1_SetConfig+0x110>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_OC1_SetConfig+0xc2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <TIM_OC1_SetConfig+0x114>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_OC1_SetConfig+0xc2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a18      	ldr	r2, [pc, #96]	@ (800391c <TIM_OC1_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC1_SetConfig+0xc2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a17      	ldr	r2, [pc, #92]	@ (8003920 <TIM_OC1_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d111      	bne.n	80038ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	621a      	str	r2, [r3, #32]
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40013400 	.word	0x40013400
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0320 	bic.w	r3, r3, #32
 8003972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a28      	ldr	r2, [pc, #160]	@ (8003a24 <TIM_OC2_SetConfig+0x100>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC2_SetConfig+0x6c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <TIM_OC2_SetConfig+0x104>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003a24 <TIM_OC2_SetConfig+0x100>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00f      	beq.n	80039d4 <TIM_OC2_SetConfig+0xb0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <TIM_OC2_SetConfig+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_OC2_SetConfig+0xb0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <TIM_OC2_SetConfig+0x108>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_OC2_SetConfig+0xb0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <TIM_OC2_SetConfig+0x10c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC2_SetConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a19      	ldr	r2, [pc, #100]	@ (8003a34 <TIM_OC2_SetConfig+0x110>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0303 	bic.w	r3, r3, #3
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a27      	ldr	r2, [pc, #156]	@ (8003b34 <TIM_OC3_SetConfig+0xfc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC3_SetConfig+0x6a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	@ (8003b38 <TIM_OC3_SetConfig+0x100>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10d      	bne.n	8003abe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <TIM_OC3_SetConfig+0xfc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xae>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <TIM_OC3_SetConfig+0x100>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xae>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b3c <TIM_OC3_SetConfig+0x104>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xae>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <TIM_OC3_SetConfig+0x108>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC3_SetConfig+0xae>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	@ (8003b44 <TIM_OC3_SetConfig+0x10c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800

08003b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	031b      	lsls	r3, r3, #12
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <TIM_OC4_SetConfig+0x100>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_OC4_SetConfig+0x6c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a27      	ldr	r2, [pc, #156]	@ (8003c4c <TIM_OC4_SetConfig+0x104>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10d      	bne.n	8003bd0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	031b      	lsls	r3, r3, #12
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <TIM_OC4_SetConfig+0x100>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_OC4_SetConfig+0xb0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <TIM_OC4_SetConfig+0x104>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC4_SetConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <TIM_OC4_SetConfig+0x108>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC4_SetConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <TIM_OC4_SetConfig+0x10c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC4_SetConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <TIM_OC4_SetConfig+0x110>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d113      	bne.n	8003c20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <TIM_OC5_SetConfig+0xb4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	@ (8003d14 <TIM_OC5_SetConfig+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <TIM_OC5_SetConfig+0xbc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	@ (8003d1c <TIM_OC5_SetConfig+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	@ (8003d20 <TIM_OC5_SetConfig+0xc4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d109      	bne.n	8003cea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40013400 	.word	0x40013400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	051b      	lsls	r3, r3, #20
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <TIM_OC6_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00f      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <TIM_OC6_SetConfig+0xbc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	@ (8003de4 <TIM_OC6_SetConfig+0xc0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a15      	ldr	r2, [pc, #84]	@ (8003de8 <TIM_OC6_SetConfig+0xc4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <TIM_OC6_SetConfig+0xc8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d109      	bne.n	8003db4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	029b      	lsls	r3, r3, #10
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e10:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e22:	f023 0307 	bic.w	r3, r3, #7
 8003e26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f68 <TIM_SlaveTimer_SetConfig+0x178>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	f000 808a 	beq.w	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003e46:	4a48      	ldr	r2, [pc, #288]	@ (8003f68 <TIM_SlaveTimer_SetConfig+0x178>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	f200 8083 	bhi.w	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e4e:	4a47      	ldr	r2, [pc, #284]	@ (8003f6c <TIM_SlaveTimer_SetConfig+0x17c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	f000 8082 	beq.w	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003e56:	4a45      	ldr	r2, [pc, #276]	@ (8003f6c <TIM_SlaveTimer_SetConfig+0x17c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d87b      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e5c:	4a44      	ldr	r2, [pc, #272]	@ (8003f70 <TIM_SlaveTimer_SetConfig+0x180>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d07b      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003e62:	4a43      	ldr	r2, [pc, #268]	@ (8003f70 <TIM_SlaveTimer_SetConfig+0x180>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d875      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e68:	4a42      	ldr	r2, [pc, #264]	@ (8003f74 <TIM_SlaveTimer_SetConfig+0x184>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d075      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003e6e:	4a41      	ldr	r2, [pc, #260]	@ (8003f74 <TIM_SlaveTimer_SetConfig+0x184>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d86f      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e78:	d06f      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003e7a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e7e:	d869      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e80:	2b70      	cmp	r3, #112	@ 0x70
 8003e82:	d01a      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0xca>
 8003e84:	2b70      	cmp	r3, #112	@ 0x70
 8003e86:	d865      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e88:	2b60      	cmp	r3, #96	@ 0x60
 8003e8a:	d059      	beq.n	8003f40 <TIM_SlaveTimer_SetConfig+0x150>
 8003e8c:	2b60      	cmp	r3, #96	@ 0x60
 8003e8e:	d861      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e90:	2b50      	cmp	r3, #80	@ 0x50
 8003e92:	d04b      	beq.n	8003f2c <TIM_SlaveTimer_SetConfig+0x13c>
 8003e94:	2b50      	cmp	r3, #80	@ 0x50
 8003e96:	d85d      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	d019      	beq.n	8003ed0 <TIM_SlaveTimer_SetConfig+0xe0>
 8003e9c:	2b40      	cmp	r3, #64	@ 0x40
 8003e9e:	d859      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003ea0:	2b30      	cmp	r3, #48	@ 0x30
 8003ea2:	d05a      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003ea4:	2b30      	cmp	r3, #48	@ 0x30
 8003ea6:	d855      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d056      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d851      	bhi.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d052      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d050      	beq.n	8003f5a <TIM_SlaveTimer_SetConfig+0x16a>
 8003eb8:	e04c      	b.n	8003f54 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003eca:	f000 f8d1 	bl	8004070 <TIM_ETR_SetConfig>
      break;
 8003ece:	e045      	b.n	8003f5c <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d004      	beq.n	8003ee2 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003edc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8003ee0:	d101      	bne.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e03b      	b.n	8003f5e <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f0c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
      break;
 8003f2a:	e017      	b.n	8003f5c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f81d 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      break;
 8003f3e:	e00d      	b.n	8003f5c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f000 f842 	bl	8003fd6 <TIM_TI2_ConfigInputStage>
      break;
 8003f52:	e003      	b.n	8003f5c <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e000      	b.n	8003f5c <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 8003f5a:	bf00      	nop
  }

  return status;
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	00100070 	.word	0x00100070
 8003f6c:	00100040 	.word	0x00100040
 8003f70:	00100030 	.word	0x00100030
 8003f74:	00100020 	.word	0x00100020

08003f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 030a 	bic.w	r3, r3, #10
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b087      	sub	sp, #28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 0210 	bic.w	r2, r3, #16
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	031b      	lsls	r3, r3, #12
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004012:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800404c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	f043 0307 	orr.w	r3, r3, #7
 800405c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800408a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	021a      	lsls	r2, r3, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2201      	movs	r2, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e065      	b.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2c      	ldr	r2, [pc, #176]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800414e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418a:	d013      	beq.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a17      	ldr	r2, [pc, #92]	@ (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a13      	ldr	r2, [pc, #76]	@ (80041fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10c      	bne.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40013400 	.word	0x40013400
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40014000 	.word	0x40014000

08004200 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e073      	b.n	8004304 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a18      	ldr	r2, [pc, #96]	@ (8004314 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d11c      	bne.n	80042f2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	051b      	lsls	r3, r3, #20
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40013400 	.word	0x40013400

08004318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e042      	b.n	800443c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f83b 	bl	8004444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2224      	movs	r2, #36	@ 0x24
 80043d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fafe 	bl	80049f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f82f 	bl	8004458 <UART_SetConfig>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e01b      	b.n	800443c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb7d 	bl	8004b34 <UART_CheckIdleState>
 800443a:	4603      	mov	r3, r0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b08c      	sub	sp, #48	@ 0x30
 800445e:	af00      	add	r7, sp, #0
 8004460:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4bab      	ldr	r3, [pc, #684]	@ (8004734 <UART_SetConfig+0x2dc>)
 8004488:	4013      	ands	r3, r2
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4aa0      	ldr	r2, [pc, #640]	@ (8004738 <UART_SetConfig+0x2e0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c0:	4313      	orrs	r3, r2
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80044ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d8:	430b      	orrs	r3, r1
 80044da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	f023 010f 	bic.w	r1, r3, #15
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a91      	ldr	r2, [pc, #580]	@ (800473c <UART_SetConfig+0x2e4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d125      	bne.n	8004548 <UART_SetConfig+0xf0>
 80044fc:	4b90      	ldr	r3, [pc, #576]	@ (8004740 <UART_SetConfig+0x2e8>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d81a      	bhi.n	8004540 <UART_SetConfig+0xe8>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0xb8>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004521 	.word	0x08004521
 8004514:	08004531 	.word	0x08004531
 8004518:	08004529 	.word	0x08004529
 800451c:	08004539 	.word	0x08004539
 8004520:	2301      	movs	r3, #1
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e0d6      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004528:	2302      	movs	r3, #2
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e0d2      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e0ce      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453e:	e0ca      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e0c6      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a7d      	ldr	r2, [pc, #500]	@ (8004744 <UART_SetConfig+0x2ec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d138      	bne.n	80045c4 <UART_SetConfig+0x16c>
 8004552:	4b7b      	ldr	r3, [pc, #492]	@ (8004740 <UART_SetConfig+0x2e8>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d82d      	bhi.n	80045bc <UART_SetConfig+0x164>
 8004560:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <UART_SetConfig+0x110>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800459d 	.word	0x0800459d
 800456c:	080045bd 	.word	0x080045bd
 8004570:	080045bd 	.word	0x080045bd
 8004574:	080045bd 	.word	0x080045bd
 8004578:	080045ad 	.word	0x080045ad
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045bd 	.word	0x080045bd
 8004584:	080045bd 	.word	0x080045bd
 8004588:	080045a5 	.word	0x080045a5
 800458c:	080045bd 	.word	0x080045bd
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045b5 	.word	0x080045b5
 800459c:	2300      	movs	r3, #0
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a2:	e098      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045aa:	e094      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b2:	e090      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ba:	e08c      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c2:	e088      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004748 <UART_SetConfig+0x2f0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d125      	bne.n	800461a <UART_SetConfig+0x1c2>
 80045ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004740 <UART_SetConfig+0x2e8>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045d8:	2b30      	cmp	r3, #48	@ 0x30
 80045da:	d016      	beq.n	800460a <UART_SetConfig+0x1b2>
 80045dc:	2b30      	cmp	r3, #48	@ 0x30
 80045de:	d818      	bhi.n	8004612 <UART_SetConfig+0x1ba>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d00a      	beq.n	80045fa <UART_SetConfig+0x1a2>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d814      	bhi.n	8004612 <UART_SetConfig+0x1ba>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <UART_SetConfig+0x19a>
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d008      	beq.n	8004602 <UART_SetConfig+0x1aa>
 80045f0:	e00f      	b.n	8004612 <UART_SetConfig+0x1ba>
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f8:	e06d      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045fa:	2302      	movs	r3, #2
 80045fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004600:	e069      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004602:	2304      	movs	r3, #4
 8004604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004608:	e065      	b.n	80046d6 <UART_SetConfig+0x27e>
 800460a:	2308      	movs	r3, #8
 800460c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004610:	e061      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004612:	2310      	movs	r3, #16
 8004614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004618:	e05d      	b.n	80046d6 <UART_SetConfig+0x27e>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4b      	ldr	r2, [pc, #300]	@ (800474c <UART_SetConfig+0x2f4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d125      	bne.n	8004670 <UART_SetConfig+0x218>
 8004624:	4b46      	ldr	r3, [pc, #280]	@ (8004740 <UART_SetConfig+0x2e8>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800462e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004630:	d016      	beq.n	8004660 <UART_SetConfig+0x208>
 8004632:	2bc0      	cmp	r3, #192	@ 0xc0
 8004634:	d818      	bhi.n	8004668 <UART_SetConfig+0x210>
 8004636:	2b80      	cmp	r3, #128	@ 0x80
 8004638:	d00a      	beq.n	8004650 <UART_SetConfig+0x1f8>
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	d814      	bhi.n	8004668 <UART_SetConfig+0x210>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <UART_SetConfig+0x1f0>
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d008      	beq.n	8004658 <UART_SetConfig+0x200>
 8004646:	e00f      	b.n	8004668 <UART_SetConfig+0x210>
 8004648:	2300      	movs	r3, #0
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800464e:	e042      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004650:	2302      	movs	r3, #2
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004656:	e03e      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800465e:	e03a      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004666:	e036      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466e:	e032      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a30      	ldr	r2, [pc, #192]	@ (8004738 <UART_SetConfig+0x2e0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d12a      	bne.n	80046d0 <UART_SetConfig+0x278>
 800467a:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <UART_SetConfig+0x2e8>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004688:	d01a      	beq.n	80046c0 <UART_SetConfig+0x268>
 800468a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800468e:	d81b      	bhi.n	80046c8 <UART_SetConfig+0x270>
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004694:	d00c      	beq.n	80046b0 <UART_SetConfig+0x258>
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800469a:	d815      	bhi.n	80046c8 <UART_SetConfig+0x270>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <UART_SetConfig+0x250>
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a4:	d008      	beq.n	80046b8 <UART_SetConfig+0x260>
 80046a6:	e00f      	b.n	80046c8 <UART_SetConfig+0x270>
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ae:	e012      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b6:	e00e      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046be:	e00a      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c6:	e006      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ce:	e002      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <UART_SetConfig+0x2e0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	f040 80a8 	bne.w	8004832 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d834      	bhi.n	8004754 <UART_SetConfig+0x2fc>
 80046ea:	a201      	add	r2, pc, #4	@ (adr r2, 80046f0 <UART_SetConfig+0x298>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004755 	.word	0x08004755
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004755 	.word	0x08004755
 8004700:	08004723 	.word	0x08004723
 8004704:	08004755 	.word	0x08004755
 8004708:	08004755 	.word	0x08004755
 800470c:	08004755 	.word	0x08004755
 8004710:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fe f96e 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8004718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471a:	e021      	b.n	8004760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <UART_SetConfig+0x2f8>)
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004720:	e01e      	b.n	8004760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7fe f8f9 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8004726:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004728:	e01a      	b.n	8004760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004730:	e016      	b.n	8004760 <UART_SetConfig+0x308>
 8004732:	bf00      	nop
 8004734:	cfff69f3 	.word	0xcfff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800475e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 812a 	beq.w	80049bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	4a9e      	ldr	r2, [pc, #632]	@ (80049e8 <UART_SetConfig+0x590>)
 800476e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004772:	461a      	mov	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	fbb3 f3f2 	udiv	r3, r3, r2
 800477a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d305      	bcc.n	8004798 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d903      	bls.n	80047a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800479e:	e10d      	b.n	80049bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	2200      	movs	r2, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	4a8e      	ldr	r2, [pc, #568]	@ (80049e8 <UART_SetConfig+0x590>)
 80047ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2200      	movs	r2, #0
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047c2:	f7fb fd29 	bl	8000218 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	020b      	lsls	r3, r1, #8
 80047d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047dc:	0202      	lsls	r2, r0, #8
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	6849      	ldr	r1, [r1, #4]
 80047e2:	0849      	lsrs	r1, r1, #1
 80047e4:	2000      	movs	r0, #0
 80047e6:	460c      	mov	r4, r1
 80047e8:	4605      	mov	r5, r0
 80047ea:	eb12 0804 	adds.w	r8, r2, r4
 80047ee:	eb43 0905 	adc.w	r9, r3, r5
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	469a      	mov	sl, r3
 80047fa:	4693      	mov	fp, r2
 80047fc:	4652      	mov	r2, sl
 80047fe:	465b      	mov	r3, fp
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fb fd08 	bl	8000218 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004816:	d308      	bcc.n	800482a <UART_SetConfig+0x3d2>
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481e:	d204      	bcs.n	800482a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e0c8      	b.n	80049bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004830:	e0c4      	b.n	80049bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800483a:	d167      	bne.n	800490c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800483c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004840:	2b08      	cmp	r3, #8
 8004842:	d828      	bhi.n	8004896 <UART_SetConfig+0x43e>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <UART_SetConfig+0x3f4>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004871 	.word	0x08004871
 8004850:	08004879 	.word	0x08004879
 8004854:	08004881 	.word	0x08004881
 8004858:	08004897 	.word	0x08004897
 800485c:	08004887 	.word	0x08004887
 8004860:	08004897 	.word	0x08004897
 8004864:	08004897 	.word	0x08004897
 8004868:	08004897 	.word	0x08004897
 800486c:	0800488f 	.word	0x0800488f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fe f8c0 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8004874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004876:	e014      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe f8d2 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487e:	e010      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004880:	4b5a      	ldr	r3, [pc, #360]	@ (80049ec <UART_SetConfig+0x594>)
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004884:	e00d      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004886:	f7fe f847 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800488a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800488c:	e009      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004894:	e005      	b.n	80048a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8089 	beq.w	80049bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	4a4e      	ldr	r2, [pc, #312]	@ (80049e8 <UART_SetConfig+0x590>)
 80048b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048bc:	005a      	lsls	r2, r3, #1
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d916      	bls.n	8004904 <UART_SetConfig+0x4ac>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d212      	bcs.n	8004904 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f023 030f 	bic.w	r3, r3, #15
 80048e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	8bfa      	ldrh	r2, [r7, #30]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e05b      	b.n	80049bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800490a:	e057      	b.n	80049bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004910:	2b08      	cmp	r3, #8
 8004912:	d828      	bhi.n	8004966 <UART_SetConfig+0x50e>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0x4c4>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	08004967 	.word	0x08004967
 800492c:	08004957 	.word	0x08004957
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
 800493c:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7fe f858 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8004944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004946:	e014      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7fe f86a 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 800494c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800494e:	e010      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b26      	ldr	r3, [pc, #152]	@ (80049ec <UART_SetConfig+0x594>)
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004954:	e00d      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fd ffdf 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800495a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800495c:	e009      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004964:	e005      	b.n	8004972 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004970:	bf00      	nop
    }

    if (pclk != 0U)
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	4a1a      	ldr	r2, [pc, #104]	@ (80049e8 <UART_SetConfig+0x590>)
 800497e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004982:	461a      	mov	r2, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	fbb3 f2f2 	udiv	r2, r3, r2
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	441a      	add	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	d909      	bls.n	80049b6 <UART_SetConfig+0x55e>
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a8:	d205      	bcs.n	80049b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	e002      	b.n	80049bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2201      	movs	r2, #1
 80049c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80049d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3730      	adds	r7, #48	@ 0x30
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	08004eb8 	.word	0x08004eb8
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aee:	d10a      	bne.n	8004b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b098      	sub	sp, #96	@ 0x60
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b44:	f7fc faae 	bl	80010a4 <HAL_GetTick>
 8004b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d12f      	bne.n	8004bb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f88e 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d022      	beq.n	8004bb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e063      	b.n	8004c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d149      	bne.n	8004c5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f857 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d03c      	beq.n	8004c5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	623b      	str	r3, [r7, #32]
   return(result);
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c32:	61fa      	str	r2, [r7, #28]
 8004c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e012      	b.n	8004c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3758      	adds	r7, #88	@ 0x58
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	e04f      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ca0:	d04b      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fc f9ff 	bl	80010a4 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e04e      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d037      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d034      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d031      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d110      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f838 	bl	8004d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e029      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d14:	d111      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f81e 	bl	8004d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00f      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d0a0      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b095      	sub	sp, #84	@ 0x54
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e3      	bne.n	8004d9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d118      	bne.n	8004e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	613b      	str	r3, [r7, #16]
   return(result);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004e22:	bf00      	nop
 8004e24:	3754      	adds	r7, #84	@ 0x54
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <memset>:
 8004e2e:	4402      	add	r2, r0
 8004e30:	4603      	mov	r3, r0
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d100      	bne.n	8004e38 <memset+0xa>
 8004e36:	4770      	bx	lr
 8004e38:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3c:	e7f9      	b.n	8004e32 <memset+0x4>
	...

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4d0d      	ldr	r5, [pc, #52]	@ (8004e78 <__libc_init_array+0x38>)
 8004e44:	4c0d      	ldr	r4, [pc, #52]	@ (8004e7c <__libc_init_array+0x3c>)
 8004e46:	1b64      	subs	r4, r4, r5
 8004e48:	10a4      	asrs	r4, r4, #2
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	4d0b      	ldr	r5, [pc, #44]	@ (8004e80 <__libc_init_array+0x40>)
 8004e52:	4c0c      	ldr	r4, [pc, #48]	@ (8004e84 <__libc_init_array+0x44>)
 8004e54:	f000 f818 	bl	8004e88 <_init>
 8004e58:	1b64      	subs	r4, r4, r5
 8004e5a:	10a4      	asrs	r4, r4, #2
 8004e5c:	2600      	movs	r6, #0
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	08004ed8 	.word	0x08004ed8
 8004e7c:	08004ed8 	.word	0x08004ed8
 8004e80:	08004ed8 	.word	0x08004ed8
 8004e84:	08004edc 	.word	0x08004edc

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
